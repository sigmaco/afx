<Qwadro>
    <Draw>
        <Pipeline>
            <Module stage='VERTEX'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                out block
                {
                    vec2 uv0;
                } sgl_v;

                const vec2 vertex[4] = vec2[](vec2(-1.0,  1.0), vec2(-1.0, -1.0), vec2( 1.0,  1.0), vec2( 1.0, -1.0));

                void main()
                {
                    gl_Position = vec4(vertex[gl_VertexID], 0.0, 1.0);
                    sgl_v.uv0 = gl_Position.xy * 0.5 + 0.5;
                }
                ]]>
            </Module>
            <Module stage='PIXEL'>
                <![CDATA[
                #version 330 core
                
                // QWADRO. Engineered by SIGMA Technology Group.

                uniform sampler2D samp0;
                uniform sampler2D samp1;
                uniform sampler2D samp2;
                
                in block
                {
                    vec2 uv0;
                } sgl_v;

                out vec4 sgl_rgba;

                void main()
                {
                    const vec3 crc = vec3( 1.595794678, -0.813476563, 0 );
                    const vec3 crb = vec3( 0, -0.391448975, 2.017822266 );
                    const vec3 adj = vec3( -0.87065506, 0.529705048f, -1.081668854f );
                    const vec3 YScalar = vec3( 1.164123535f, 1.164123535f, 1.164123535f );

                    float Y = texture( samp0, sgl_v.uv0).x;
                    float Cr = texture( samp1, sgl_v.uv0).x;
                    float Cb = texture( samp2, sgl_v.uv0).x;

                    vec3 p = ( YScalar * Y );
                    p += ( crc * Cr ) + ( crb * Cb ) + adj;

                    vec4 binkImage;
                    binkImage.xyz = p;
                    binkImage.w = 1.0;

                    //vec4 color = ( binkImage * fragment.color*/ ) + fragment.texcoord1;
                    vec4 color = binkImage;
                    sgl_rgba.xyz = color.xyz * color.w;
                    sgl_rgba.w = color.w;
                }
                ]]>
            </Module>
            <Input topology='TRI_STRIP' restart='false'/>
            <Rasterization>
                <DepthClampEnable>false</DepthClampEnable>
                <RasterizerDiscardEnable>false</RasterizerDiscardEnable>
                <FillMode>SOLID</FillMode>
                <CullMode>BACK</CullMode>
                <FrontFace>CCW</FrontFace>
                <DepthBias enable='false' constant='0.0' clamp='0.0' slope='0.0'/>
                <LineWidth>1.0</LineWidth>
            </Rasterization>
            <DepthHandling>
                <DepthTestEnable>false</DepthTestEnable>
                <DepthWriteEnable>false</DepthWriteEnable>
                <DepthCompareOp>LESS</DepthCompareOp>
                <DepthBoundsTest enable='false' min='0.0' max='1.0'/>
                <StencilTest enable='false'>
                    <Front fail='' pass='' depthFail='' compare=''/>
                    <Back fail='' pass='' depthFail='' compare=''/>
                </StencilTest>
            </DepthHandling>
            <Approach>
                <Socket>
                    <Entry binding='0' type='COMBINED_IMAGE_SAMPLER' cnt='1' name='samp0'/>
                    <Entry binding='1' type='COMBINED_IMAGE_SAMPLER' cnt='1' name='samp1'/>
                    <Entry binding='2' type='COMBINED_IMAGE_SAMPLER' cnt='1' name='samp2'/>
                </Socket>
            </Approach>
        </Pipeline>
    </Draw>
</Qwadro>
