<Qwadro>
    <Draw>
        <Pipeline>
            <Module stage='VERTEX'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                layout(std140) uniform data
                {
                    vec2 viewSize;
                    mat3 scissorMat;
                    mat3 paintMat;
                    vec4 innerCol;
                    vec4 outerCol;
                    vec2 scissorExt;
                    vec2 scissorScale;
                    vec2 extent;
                    float radius;
                    float feather;
                    float strokeMult;
                    float strokeThr;
                    int texType;
                    int type;
                };

                layout(location = 0) in vec2 a_xy;
                layout(location = 1) in vec2 a_uv0;

                out block
                {
                    vec2 xy;
                    vec2 uv;
                }
                sgl_v;

                void main(void)
                {
                    sgl_v.xy = a_xy;
                    sgl_v.uv0 = a_uv0;
                    gl_Position = vec4(2.0 * a_xy.x / viewSize.x - 1.0, 1.0 - 2.0 * a_xy.y / viewSize.y, 0, 1);
                }
                ]]>
            </Module>
            <Module stage='PIXEL'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                layout(std140) uniform data
                {
                    vec2 viewSize;
                    mat3 scissorMat;
                    mat3 paintMat;
                    vec4 innerCol;
                    vec4 outerCol;
                    vec2 scissorExt;
                    vec2 scissorScale;
                    vec2 extent;
                    float radius;
                    float feather;
                    float strokeMult;
                    float strokeThr;
                    int texType;
                    int type;
                };

                uniform sampler2D tex;

                in block
                {
                    vec2 xy;
                    vec2 uv;
                }
                sgl_v;

                out vec4 outColor;

                float sdroundrect(vec2 pt, vec2 ext, float rad)
                {
                    vec2 ext2 = ext - vec2(rad,rad);
                    vec2 d = abs(pt) - ext2;
                    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rad;
                }

                // Scissoring
                float scissorMask(vec2 p)
                {
                    vec2 sc = (abs((scissorMat * vec3(p,1.0)).xy) - scissorExt);
                    sc = vec2(0.5,0.5) - sc * scissorScale;
                    return clamp(sc.x,0.0,1.0) * clamp(sc.y,0.0,1.0);
                }

                // Stroke - from [0..1] to clipped pyramid, where the slope is 1px.
                float strokeMask()
                {
                    return min(1.0, (1.0-abs(sgl_v.uv0.x*2.0-1.0))*strokeMult) * min(1.0, sgl_v.uv0.y);
                }

                void main(void)
                {
                    float scissor = scissorMask(sgl_v.xy);

                    float strokeAlpha = strokeMask();
                    
                    if (strokeAlpha < strokeThr)
                        discard;

                    vec4 result;
                    
                    if (type == 0) {			// Gradient
                        // Calculate gradient color using box gradient
                        vec2 pt = (paintMat * vec3(sgl_v.xy,1.0)).xy;
                        float d = clamp((sdroundrect(pt, extent, radius) + feather*0.5) / feather, 0.0, 1.0);
                        vec4 color = mix(innerCol,outerCol,d);
                        // Combine alpha
                        color *= strokeAlpha * scissor;
                        result = color;
                    } else if (type == 1)
                    {
                        // Image
                        // Calculate color fron texture
                        vec2 pt = (paintMat * vec3(sgl_v.xy,1.0)).xy / extent;

                        vec4 color = texture(tex, pt);

                        if (texType == 1)
                            color = vec4(color.xyz*color.w,color.w);
                        
                        if (texType == 2)
                            color = vec4(color.x);
                            
                        // Apply color tint and alpha.
                        color *= innerCol;
                        // Combine alpha
                        color *= strokeAlpha * scissor;
                        result = color;
                    } else if (type == 2)
                    {
                        // Stencil fill
                        result = vec4(1,1,1,1);
                    } else if (type == 3)
                    {
                        // Textured tris
                        vec4 color = texture(tex, sgl_v.uv0);
                        
                        if (texType == 1)
                            color = vec4(color.xyz*color.w,color.w);
                            
                        if (texType == 2)
                            color = vec4(color.x);
                            
                        color *= scissor;
                            
                        result = color * innerCol;
                    }
                    outColor = result;
                }
                ]]>
            </Module>
            <Input topology='TRI_LIST' restart='false'/>
            <Rasterization>
                <DepthClampEnable>false</DepthClampEnable>
                <RasterizerDiscardEnable>false</RasterizerDiscardEnable>
                <FillMode>SOLID</FillMode>
                <CullMode>BACK</CullMode>
                <FrontFace>CCW</FrontFace>
                <DepthBias enable='false' constant='0.0' clamp='0.0' slope='0.0'/>
                <LineWidth>1.0</LineWidth>
            </Rasterization>
            <DepthHandling>
                <DepthTestEnable>false</DepthTestEnable>
                <DepthWriteEnable>false</DepthWriteEnable>
                <DepthCompareOp>LESS</DepthCompareOp>
                <DepthBoundsTest enable='false' min='0.0' max='1.0'/>
                <StencilTest enable='false'>
                    <Front fail='' pass='' depthFail='' compare=''/>
                    <Back fail='' pass='' depthFail='' compare=''/>
                </StencilTest>
            </DepthHandling>
            <Approach>
                <Socket>
                    <Entry binding='0' type='CONSTANT_BUFFER' cnt='1' name='data'/>
                    <Entry binding='1' type='COMBINED_IMAGE_SAMPLER' cnt='1' name='tex'/>
                </Socket>
            </Approach>
        </Pipeline>
    </Draw>
</Qwadro>
