<Qwadro>
    <Draw>
        <Pipeline>
            <Module stage='VERTEX'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                layout(std140, row_major) uniform sgl_view
                {
                    mat4 v;
                    mat4 p;
                    mat4 vp;
                    vec3 viewPos;
                    vec3 sunPos;
                    vec3 sunKd;
                };

                layout(std140, row_major) uniform sgl_obj
                {
                    mat4 m;
                    mat3 n;
                };

                layout (location = 0) in vec3 aPos;
                layout (location = 1) in vec3 aNormal;

                out block
                {
                    vec3 FragPos;
                    vec3 Normal;
                } sgl_v;

                void main()
                {
                    sgl_v.FragPos = vec3(m * vec4(aPos, 1.0));
                    sgl_v.Normal = mat3(transpose(inverse(m))) * aNormal;  
                    
                    gl_Position = p * v * vec4(sgl_v.FragPos, 1.0);
                }
                ]]>
            </Module>
            <Module stage='PIXEL'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                layout(std140, row_major) uniform sgl_view
                {
                    mat4 v;
                    mat4 p;
                    mat4 vp;
                    vec3 viewPos;
                    vec3 sunPos;
                    vec3 sunKd;
                };
                
                layout(std140) uniform sgl_mtl
                {
                    vec3  Kd;
                    vec3  Ks;
                    float Ns;
                    float d;
                    float Ni;
                    int   illum;
                }; 
                
                in block
                {
                    vec3 FragPos;
                    vec3 Normal;
                } sgl_v;
                
                out vec4 FragColor;
                
                const vec3 lightPosition = vec3(10, 10, 10);
                const vec3 lightAmbient = vec3(0.1, 0.1, 0.1);
                const vec3 lightDiffuse = vec3(0.5, 0.5, 0.5);
                const vec3 lightSpecular = vec3(0.5, 0.5, 0.5);
                
                void main()
                {
                    // ambient
                    vec3 ambient = lightAmbient;
                    
                    // diffuse 
                    vec3 norm = normalize(sgl_v.Normal);
                    vec3 lightDir = normalize(lightPosition - sgl_v.FragPos);
                    float diff = max(dot(norm, lightDir), 0.0);
                    vec3 diffuse = lightDiffuse * (diff * Kd);
                    
                    // specular
                    vec3 viewDir = normalize(viewPos - sgl_v.FragPos);
                    vec3 reflectDir = reflect(-lightDir, norm);  
                    float spec = pow(max(dot(viewDir, reflectDir), 0.0), Ns);
                    vec3 specular = lightSpecular * (spec * Ks);  
                        
                    vec3 result = ambient + diffuse + specular;
                    FragColor = vec4(result, 1.0);
                } 
                ]]>
            </Module>
            <Input topology='TRI_LIST' restart='false'>
                <Stream location='0' binding='0' format='XYZ32' />
                <Stream location='1' binding='1' format='XYZ32' />
            </Input>
            <Rasterization>
                <DepthClampEnable>false</DepthClampEnable>
                <RasterizerDiscardEnable>false</RasterizerDiscardEnable>
                <FillMode>SOLID</FillMode>
                <CullMode>BACK</CullMode>
                <FrontFace>CCW</FrontFace>
                <DepthBias enable='false' constant='0.0' clamp='0.0' slope='0.0'/>
                <LineWidth>1.0</LineWidth>
            </Rasterization>
            <DepthHandling>
                <DepthTestEnable>true</DepthTestEnable>
                <DepthWriteEnable>true</DepthWriteEnable>
                <DepthCompareOp>LESS</DepthCompareOp>
                <DepthBoundsTest enable='false' min='0.0' max='1.0'/>
                <StencilTest enable='false'>
                    <Front fail='' pass='' depthFail='' compare=''/>
                    <Back fail='' pass='' depthFail='' compare=''/>
                </StencilTest>
            </DepthHandling>
            <Approach>
                <Socket>
                    <Entry binding='0' type='CONSTANT_BUFFER' cnt='1' name='sgl_view'/>
                </Socket>
                <Socket>
                    <Entry binding='1' type='CONSTANT_BUFFER' cnt='1' name='sgl_shdr'/>
                </Socket>
                <Socket>
                    <Entry binding='2' type='CONSTANT_BUFFER' cnt='1' name='sgl_mtl'/>
                </Socket>
                <Socket>
                    <Entry binding='3' type='CONSTANT_BUFFER' cnt='1' name='sgl_obj'/>
                </Socket>
            </Approach>
        </Pipeline>
    </Draw>
</Qwadro>
