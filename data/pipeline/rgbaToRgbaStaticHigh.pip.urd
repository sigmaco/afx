<Qwadro>
    <Draw>
        <Pipeline>
            <Module stage='VERTEX'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                out block
                {
                    vec2 uv0;
                } sgl_v;

                const vec2 vertex[4] = vec2[](vec2(-1.0,  1.0), vec2(-1.0, -1.0), vec2( 1.0,  1.0), vec2( 1.0, -1.0));

                void main()
                {
                    gl_Position = vec4(vertex[gl_VertexID], 0.0, 1.0);
                    sgl_v.uv0 = gl_Position.xy * 0.5 + 0.5;
                }
                ]]>
            </Module>
            <Module stage='PIXEL'>
                <![CDATA[
                #version 330 core

                // QWADRO. Engineered by SIGMA Technology Group.

                uniform sampler2D samp;

                in block
                {
                    vec2 uv0;
                } sgl_v;

                out vec4 sgl_rgba;

                uniform sampler2D tex;
                uniform sampler2D noise_tex;
                uniform float intensity;
                uniform float time;
                uniform vec2 resolution;

                uniform vec2 block_size = vec2(16);
                uniform vec2 noise_tex_size = vec2(64);

                uniform int glitchAllBlocks = 0;
                uniform int grayAllBlocks = 0;
                uniform int interleaveAllLines = 0;

                void main()
                {
                    vec2 uv = gl_FragCoord.xy / resolution.xy;
                    vec2 block = floor(gl_FragCoord.xy / block_size);
                    vec2 uv_noise = block / noise_tex_size;
                    uv_noise += floor(vec2(time) * vec2(1234.0, 3543.0)) / noise_tex_size;
                    
                    float block_thresh = pow(fract(time * 1236.0453), 2.0) * 0.2 * intensity;
                    float line_thresh = pow(fract(time * 2236.0453), 3.0) * 0.7 * intensity;
                    
                    vec2 uv_r = uv;
                    vec2 uv_g = uv;
                    vec2 uv_b = uv;
                    
                    vec4 block_color = texture2D(noise_tex, uv_noise);
                    vec4 line_color  = texture2D(noise_tex, vec2(uv_noise.y, 0.0));

                    // glitch some blocks and lines
                    if (block_color.r < block_thresh || line_color.g < line_thresh || glitchAllBlocks != 0)
                    {
                        vec2 dist = (fract(uv_noise) - 0.5) * 0.3;
                        uv_r += dist * 0.1;
                        uv_g += dist * 0.2;
                        uv_b += dist * 0.125;
                    }

                    vec4 fragColor = texture2D(tex, uv);
                    fragColor.r = texture2D(tex, uv_r).r;
                    fragColor.g = texture2D(tex, uv_g).g;
                    fragColor.b = texture2D(tex, uv_b).b;

                    // loose luma for some blocks
                    if (block_color.g < block_thresh || grayAllBlocks != 0)
                        fragColor.rgb = fragColor.ggg;

                    // discolor block lines
                    if (line_color.b * 3.5 < line_thresh)
                        fragColor.rgb = vec3(0.0, dot(fragColor.rgb, vec3(1.0)), 0.0);

                    // interleave lines in some blocks
                    if (block_color.g * 1.5 < block_thresh || line_color.g * 2.5 < line_thresh || interleaveAllLines != 0)
                    {
                        float line = fract(gl_FragCoord.y / 3.0);
                        vec3 mask = vec3(3.0, 0.0, 0.0);
                        if (line > 0.333)
                            mask = vec3(0.0, 3.0, 0.0);
                        if (line > 0.666)
                            mask = vec3(0.0, 0.0, 3.0);
                        
                        fragColor.xyz *= mask;
                    }
                    gl_FragColor = fragColor;
                }
                ]]>
            </Module>
            <Input topology='TRI_STRIP' restart='false'/>
            <Rasterization>
                <DepthClampEnable>false</DepthClampEnable>
                <RasterizerDiscardEnable>false</RasterizerDiscardEnable>
                <FillMode>SOLID</FillMode>
                <CullMode>BACK</CullMode>
                <FrontFace>CCW</FrontFace>
                <DepthBias enable='false' constant='0.0' clamp='0.0' slope='0.0'/>
                <LineWidth>1.0</LineWidth>
            </Rasterization>
            <DepthHandling>
                <DepthTestEnable>false</DepthTestEnable>
                <DepthWriteEnable>false</DepthWriteEnable>
                <DepthCompareOp>LESS</DepthCompareOp>
                <DepthBoundsTest enable='false' min='0.0' max='1.0'/>
                <StencilTest enable='false'>
                    <Front fail='' pass='' depthFail='' compare=''/>
                    <Back fail='' pass='' depthFail='' compare=''/>
                </StencilTest>
            </DepthHandling>
            <Approach>
                <Socket>
                    <Entry binding='0' type='COMBINED_IMAGE_SAMPLER' cnt='1' name='samp'/>
                </Socket>
            </Approach>
        </Pipeline>
    </Draw>
</Qwadro>
