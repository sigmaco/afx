#version 330 core

struct LightProperties
{
    vec3 direction;
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;
};

struct MaterialProperties
{
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;
    float specularExponent;
};

layout(location = 1, std140) uniform sgl1
{
    LightProperties u_light;
    MaterialProperties u_material;
    int u_useTexture;
};

uniform sampler2D diffuseTexture;

in block
{
    vec3 xyz;
    vec3 nrm;
    vec2 uv;
}
sgl_in;

out vec4 f_rgba;

void main()
{
    // Note: All calculations are in camera space.
    vec4 textureColor = vec4(1.0, 1.0, 1.0, 1.0);

    if (u_useTexture != 0)
    {
        textureColor = texture(diffuseTexture, sgl_in.uv);
    }

    // We use the diffuse texture for the ambient factor as well
    vec4 color = u_light.ambientColor * u_material.ambientColor * textureColor;
    vec3 normal = normalize(sgl_in.nrm);
    float nDotL = max(dot(u_light.direction, normal), 0.0);

    if (nDotL > 0.0)
    {
        vec3 eye = normalize(sgl_in.xyz);
        // Incident vector is opposite light direction vector.
        vec3 reflection = reflect(-u_light.direction, normal);
        float eDotR = max(dot(eye, reflection), 0.0);
        color += u_light.diffuseColor * u_material.diffuseColor * textureColor * nDotL;
        float specularIntensity = 0.0;

        if (eDotR > 0.0)
        {
            specularIntensity = pow(eDotR, u_material.specularExponent);
        }
        color += u_light.specularColor * u_material.specularColor * specularIntensity;
    }

    f_rgba = color;
}
