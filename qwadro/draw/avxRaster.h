/*
 *          ::::::::  :::       :::     :::     :::::::::  :::::::::   ::::::::
 *         :+:    :+: :+:       :+:   :+: :+:   :+:    :+: :+:    :+: :+:    :+:
 *         +:+    +:+ +:+       +:+  +:+   +:+  +:+    +:+ +:+    +:+ +:+    +:+
 *         +#+    +:+ +#+  +:+  +#+ +#++:++#++: +#+    +:+ +#++:++#:  +#+    +:+
 *         +#+  # +#+ +#+ +#+#+ +#+ +#+     +#+ +#+    +#+ +#+    +#+ +#+    +#+
 *         #+#   +#+   #+#+# #+#+#  #+#     #+# #+#    #+# #+#    #+# #+#    #+#
 *          ###### ###  ###   ###   ###     ### #########  ###    ###  ########
 *
 *        Q W A D R O   V I D E O   G R A P H I C S   I N F R A S T R U C T U R E
 *
 *                                   Public Test Build
 *                               (c) 2017 SIGMA FEDERATION
 *                             <https://sigmaco.org/qwadro/>
 */

  //////////////////////////////////////////////////////////////////////////////
 // QWADRO FORMATTED VIDEO MEMORY BUFFER                                     //
//////////////////////////////////////////////////////////////////////////////

// This code is part of SIGMA GL/2 <https://sigmaco.org/gl>
// This software is part of Advanced Video Graphics Extensions & Experiments.

#ifndef AVX_RASTER_H
#define AVX_RASTER_H

/*
    A list of function declarations related to raster operations in a graphics or rendering API, 
    related to the management and manipulation of raster data (such as textures or images) in a drawing system.

    These functions are used to interact with raster data in a graphics system, likely within a GPU or rendering context. 
    They include operations for testing usage and flags, querying properties, manipulating textures (or images), 
    and transferring data between the system and the GPU or storage.
*/

// LOD is mip level or sample level, depending on raster

#include "qwadro/draw/avxColor.h"
#include "qwadro/draw/avxFormat.h"
#include "qwadro/io/afxUri.h"
#include "qwadro/draw/avxSampler.h"
#include "qwadro/base/afxWarp.h"
//#include "qwadro/draw/avxTransference.h"
#include "qwadro/draw/avxViewport.h"
 
#define AVX_RASTER_ALIGNMENT (256)

typedef enum avxRasterUsage
{
    // The texture can be used as the source of a copy operation.
    avxRasterUsage_SRC      = AFX_BITMASK(0),
    // The texture can be used as the destination of a copy or write operation.
    avxRasterUsage_DST      = AFX_BITMASK(1),
    avxRasterUsage_COPY     = (avxRasterUsage_SRC | avxRasterUsage_DST),

    // The texture can be used as a canvas' draw buffer.
    avxRasterUsage_DRAW     = AFX_BITMASK(2),
    // The texture can be bound for use as a sampled texture in a shader.
    avxRasterUsage_TEXTURE  = AFX_BITMASK(3),
    avxRasterUsage_VIDEO    = (avxRasterUsage_TEXTURE | avxRasterUsage_DRAW),
    
    // The texture can be bound for use as a storage texture in a shader.
    avxRasterUsage_STORAGE  = AFX_BITMASK(4),
    
    avxRasterUsage_ALL      = avxRasterUsage_COPY | avxRasterUsage_VIDEO | avxRasterUsage_STORAGE,
} avxRasterUsage;

typedef enum avxRasterFlag
{
    // has more than 1 LOD, which are subsamples from base image; (aka mipmaps).
    avxRasterFlag_MIP       = AFX_BITMASK(0),
    // Depth is represented as layers.
    // When not forced, this flag is generated when depth is greater than 1 and the raster is not volumetric.
    avxRasterFlag_LAYER     = AFX_BITMASK(1),
    // has more than 1 LOD, which are supersamples from base image; (aka multisample).
    avxRasterFlag_MULTISAMP = AFX_BITMASK(2),

    // is one or more maps of a cubemapping texture.
    avxRasterFlag_CUBEMAP   = AFX_BITMASK(3),
    
    // autogenerated by acquisition if omitted.
    // expands only into its width as a linear buffer.
    avxRasterFlag_1D        = AFX_BITMASK(4),
    // a common rectangular image.
    avxRasterFlag_2D        = AFX_BITMASK(5),
    // depth is not layer but volumetric extent.
    avxRasterFlag_3D        = AFX_BITMASK(6),

    // The raster will be backed by sparse memory.
    avxRasterFlag_SPARSE    = AFX_BITMASK(9),

    // specifies linear tiling (texels are laid out in memory in row-major order, possibly with some padding on each row).
    // Otherwise, it always assume optimal tiling (texels are laid out in an implementation-dependent arrangement, for more efficient memory access).    
    avxRasterFlag_ROW_MAJOR = AFX_BITMASK(10),

    // The raster will be backed by external memory.
    avxRasterFlag_FOREIGN   = AFX_BITMASK(11)
} avxRasterFlags;

typedef enum avxRasterLayout
// Enumerant of layouts of raster and raster portions.
{
    // The layout is unknown, usually after allocation.
    // Raster memory cannot be transitioned into this layout.
    avxRasterLayout_UNDEFINED,
    // The general layout supports all types of device access, unless specified otherwise.
    avxRasterLayout_GENRL       = AFX_BITMASK(0),
    // Allows read/load access as a canvas' buffers in the graphics pipeline.
    avxRasterLayout_DRAW_R      = AFX_BITMASK(1),
    // Allows write/store access as a canvas' buffers in the graphics pipeline.
    avxRasterLayout_DRAW_W      = AFX_BITMASK(2),
    // Allows read/load/fetch access in a shader as a sampled raster, combined raster/sampler, or input attachment.
    avxRasterLayout_RSRC_R      = AFX_BITMASK(3),
    // Allows write/store access in a shader as a sampled raster, combined raster/sampler, or input attachment.
    avxRasterLayout_RSRC_W      = AFX_BITMASK(4),
    // Allows read access as an attachment, or in shaders as a sampled image, combined image/sampler, or input attachment.
    avxRasterLayout_R           = AFX_BITMASK(5),
    // Allows write access as an attachment, or in shaders as a sampled image, combined image/sampler, or input attachment.
    avxRasterLayout_W           = AFX_BITMASK(6),
    // Allows use as a source raster of a transfer command.
    // This layout is valid only for rasters acquired with the SRC usage bit enabled.
    avxRasterLayout_SRC         = AFX_BITMASK(7),
    // Allows use as a destination raster of a transfer command.
    // This layout is valid only for rasters acquired with the DST usage bit enabled.
    avxRasterLayout_DST         = AFX_BITMASK(8),
} avxRasterLayout;

AFX_DEFINE_STRUCT(avxRasterArrangement)
// Information about the layout of the raster subresource.
{
    afxFlags        memFlags;
    // the byte offset from the start of the raster or the plane where the raster subresource begins.
    afxSize         offset;
    // the size in bytes of the raster subresource. siz includes any extra memory that is required based on rowStride.
    afxUnit         size;
    // The alignment.
    afxUnit         align;
    // The byte-stride for the format;
    afxUnit         fmtStride;
    // the number of bytes between each row of texels in an raster.
    afxUnit         rowStride;
    //  the number of bytes between each layer or (3D) slice of an raster.
    afxUnit         imgStride;
};

typedef enum avxStorageFlag
{
    // Memory allocated with this type is the most efficient for device access.
    avxStorageFlag_DEV_LOCAL = AFX_BITMASK(0),
    // The memory type only allows device access to the memory.
    avxStorageFlag_DEV_LAZILY = AFX_BITMASK(1),
    // The memory type only allows device access to the memory, and allows protected queue operations to access the memory.
    avxStorageFlag_DEV_PROTECTED = AFX_BITMASK(2),

    // Memory allocated with this type can be mapped for host access.
    avxStorageFlag_MAPPABLE = AFX_BITMASK(3),
    // Flush and invalidations are not needed to manage availability and visibility on the host.
    avxStorageFlag_COHERENT = AFX_BITMASK(4),
    // Memory allocated with this type is cached on the host. Host memory accesses to uncached memory are slower.
    avxStorageFlag_CACHED = AFX_BITMASK(5),

    avxStorageFlag_EXT_HOST = AFX_BITMASK(6),
    avxStorageFlag_EXT_WIN32 = AFX_BITMASK(7),
    avxStorageFlag_EXT_WIN32_KMT = AFX_BITMASK(8),
    avxStorageFlag_EXT_D3D11TEX = AFX_BITMASK(9),
} avxStorageFlags;

AFX_DEFINE_STRUCT(avxRasterAllocation2)
{
    avxStorageFlags resrvdF;
    union
    {
        struct
        {
            void*   ptr;
            afxSize size;
        } host;
        struct
        {
            afxUnit msuId;
            afxSize size;
            afxInt hndType;
            void* hnd;
            afxChar16 const*name;
        } w32;
        struct
        {
            afxUnit msuId;
            afxSize size;
            afxInt hndType;
            int fd;
        } fd;
    };
};

AFX_DEFINE_STRUCT(avxRasterBlock)
// Structure specifying an avxRaster subresource range.
{
    // The first mipmap level accessible to the view.
    afxUnit baseLod;
    // The number of mipmap levels (starting from @baseLodIdx) accessible to the view.
    afxUnit lodCnt;
    // The first array layer accessible to the view.
    afxUnit baseLayer;
    // The number of array layers (starting from @baseLayer) accessible to the view.
    afxUnit layerCnt;
};

AFX_DEFINE_STRUCT(avxRasterRegion)
{
    afxUnit         lodIdx;
    // The initial x, y, z offsets in texels of the sub-region of the source or destination avxRaster data.
    avxOrigin       origin;
    // The size in texels of the avxRaster to copy in width, height and depth.
    avxRange        whd;
};

AFX_DEFINE_STRUCT(avxRasterInfo)
{
    // A avxFormat describing the format of the data elements in the raster.
    avxFormat       fmt;
    // The extent of the raster.
    avxRange        whd;
    // The number of mipmaps/upsamples. Default is mipmap.
    afxUnit         lodCnt;
    // A bitmask specifying additional parameters of the raster.
    avxRasterFlags  flags;
    // A bitmask specifying allowed usages of the raster.
    avxRasterUsage  usage;
    // A bitmask of device bridges that will access this buffer.
    afxMask         exuMask;    
    // A user-defined data.
    void*           udd;
    // A static string specifying a debug tag.
    afxString       tag;
};

/*
    The AvxAcquireRasters() function acquires multiple rasters (textures or images) for use in a drawing system, 
    based on the provided avxRasterInfo.
*/

AVX afxError AvxAcquireRasters
(
    // The system which will host the new acquired rasters.
    afxDrawSystem dsys,
    // The number of rasters to be acquired.
    afxUnit cnt,
    // An array of structures prescribing the rasters to be acquired.
    avxRasterInfo const info[],
    // An array of handles for each acquired raster.
    avxRaster rasters[]
);

AFX_DEFINE_STRUCT(avxExorasterInfo)
{
    avxRasterInfo   rasi;
    // reserved for interop
    avxStorageFlags resrvdF;
    afxSize         resrvdA;
    afxSize         resrvdS;
};

AVX afxError AvxAcquireExternalRasters
(
    // The system which will host the new acquired rasters.
    afxDrawSystem dsys,
    // The number of rasters to be acquired.
    afxUnit cnt,
    // An array of structures prescribing the rasters to be acquired.
    avxExorasterInfo const info[],
    // An array of handles for each acquired raster.
    avxRaster rasters[]
);

AFX_DEFINE_STRUCT(avxSubrasterInfo)
{
    // A avxRaster on which the view will be created.
    avxRaster       ras;
    // A avxFormat describing the format of the data elements in the raster.
    avxFormat       fmt;
    avxSwizzling    swizzle;
    afxUnit         baseLod;
    // The number of mipmaps/upsamples. Default is mipmap.
    afxUnit         lodCnt;
    // The index of the layer to be used as first layer by the subraster.
    afxUnit         baseLayer;
    afxUnit         layerCnt;
    // A bitmask specifying additional parameters of the raster.
    avxRasterFlags  flags;
    // A user-defined data.
    void*           udd;
    // A static string specifying a debug tag.
    afxString       tag;
};

AVX afxError AvxReacquireRasters
(
    // The system which will host the new acquired rasters.
    afxDrawSystem dsys,
    // The number of rasters to be acquired.
    afxUnit cnt,
    // An array of structures prescribing the rasters to be acquired.
    avxSubrasterInfo const info[],
    // An array of handles for each acquired raster.
    avxRaster rasters[]
);

////////////////////////////////////////////////////////////////////////////////

AVX afxDrawSystem   AvxGetRasterHost
(
    avxRaster       ras
);

/*
    The AvxGetRasterUsage() function tests the usage flags of a raster and 
    returns whether the raster is used in specific ways defined by the mask.
*/

AVX avxRasterUsage AvxGetRasterUsage
(
    avxRaster ras, 
    avxRasterUsage mask
);

/*
    The AvxGetRasterFlags() function tests specific flags (probably for state or attributes) of the raster and 
    returns whether those flags are set.
*/

AVX avxRasterFlags AvxGetRasterFlags
(
    avxRaster ras, 
    avxRasterFlags mask
);

/*
    The AvxDescribeRaster() function provides detailed information about the raster, 
    storing the result in the provided avxRasterInfo structure.
*/

AVX void AvxDescribeRaster
(
    avxRaster ras, 
    avxRasterInfo* desc,
    avxSubrasterInfo* sub,
    avxExorasterInfo* exo
);

/*
    The AvxGetRasterFormat() function returns the format of the raster (e.g., pixel format, bit depth).
*/

AVX avxFormat AvxGetRasterFormat
(
    avxRaster ras
);

/*
    The AvxDescribeRasterFormat() function describes the raster's format capabilites in a given bridge.
*/

AVX avxFormat AvxDescribeRasterFormat
(
    avxRaster ras, 
    avxFormatDescription* pfd
);

/*
    The AvxGetRasterExtent() function retrieves the extent (size or dimensions) of a raster at a particular 
    level of detail (LOD), specified by lodIdx.
*/

AVX avxRange AvxGetRasterExtent
(
    avxRaster ras, 
    afxUnit lodIdx
);

/*
    The AvxGetRasterSwizzling() function gets the color swizzling for a given sub-index of a raster (typically for GPU color format mapping).
*/

AVX void AvxGetRasterSwizzling
(
    avxRaster ras, 
    avxSwizzling* csw
);

/*
    The AvxQueryRasterArrangement() function queries the layout of a raster at a given LOD and layer index, potentially for more detailed memory access patterns.
*/

AVX afxBool AvxQueryRasterArrangement
(
    avxRaster ras, 
    avxRasterRegion const* rgn,
    avxRasterArrangement* layout
);

#endif//AVX_RASTER_H
